// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VizaImpl.proto

#ifndef PROTOBUF_VizaImpl_2eproto__INCLUDED
#define PROTOBUF_VizaImpl_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Viza {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VizaImpl_2eproto();
void protobuf_AssignDesc_VizaImpl_2eproto();
void protobuf_ShutdownFile_VizaImpl_2eproto();

class Container;
class ContainerList;

// ===================================================================

class Container : public ::google::protobuf::Message {
 public:
  Container();
  virtual ~Container();

  Container(const Container& from);

  inline Container& operator=(const Container& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Container& default_instance();

  void Swap(Container* other);

  // implements Message ----------------------------------------------

  Container* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Container& from);
  void MergeFrom(const Container& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float sliceBegin = 1;
  inline bool has_slicebegin() const;
  inline void clear_slicebegin();
  static const int kSliceBeginFieldNumber = 1;
  inline float slicebegin() const;
  inline void set_slicebegin(float value);

  // required float sliceEnd = 2;
  inline bool has_sliceend() const;
  inline void clear_sliceend();
  static const int kSliceEndFieldNumber = 2;
  inline float sliceend() const;
  inline void set_sliceend(float value);

  // repeated float attributeValues = 3;
  inline int attributevalues_size() const;
  inline void clear_attributevalues();
  static const int kAttributeValuesFieldNumber = 3;
  inline float attributevalues(int index) const;
  inline void set_attributevalues(int index, float value);
  inline void add_attributevalues(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      attributevalues() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_attributevalues();

  // repeated uint32 classes = 4;
  inline int classes_size() const;
  inline void clear_classes();
  static const int kClassesFieldNumber = 4;
  inline ::google::protobuf::uint32 classes(int index) const;
  inline void set_classes(int index, ::google::protobuf::uint32 value);
  inline void add_classes(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      classes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_classes();

  // required uint32 sliceIdx = 5;
  inline bool has_sliceidx() const;
  inline void clear_sliceidx();
  static const int kSliceIdxFieldNumber = 5;
  inline ::google::protobuf::uint32 sliceidx() const;
  inline void set_sliceidx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Viza.Container)
 private:
  inline void set_has_slicebegin();
  inline void clear_has_slicebegin();
  inline void set_has_sliceend();
  inline void clear_has_sliceend();
  inline void set_has_sliceidx();
  inline void clear_has_sliceidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float slicebegin_;
  float sliceend_;
  ::google::protobuf::RepeatedField< float > attributevalues_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > classes_;
  ::google::protobuf::uint32 sliceidx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_VizaImpl_2eproto();
  friend void protobuf_AssignDesc_VizaImpl_2eproto();
  friend void protobuf_ShutdownFile_VizaImpl_2eproto();

  void InitAsDefaultInstance();
  static Container* default_instance_;
};
// -------------------------------------------------------------------

class ContainerList : public ::google::protobuf::Message {
 public:
  ContainerList();
  virtual ~ContainerList();

  ContainerList(const ContainerList& from);

  inline ContainerList& operator=(const ContainerList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContainerList& default_instance();

  void Swap(ContainerList* other);

  // implements Message ----------------------------------------------

  ContainerList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContainerList& from);
  void MergeFrom(const ContainerList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Viza.Container containers = 1;
  inline int containers_size() const;
  inline void clear_containers();
  static const int kContainersFieldNumber = 1;
  inline const ::Viza::Container& containers(int index) const;
  inline ::Viza::Container* mutable_containers(int index);
  inline ::Viza::Container* add_containers();
  inline const ::google::protobuf::RepeatedPtrField< ::Viza::Container >&
      containers() const;
  inline ::google::protobuf::RepeatedPtrField< ::Viza::Container >*
      mutable_containers();

  // required uint32 songIdx = 2;
  inline bool has_songidx() const;
  inline void clear_songidx();
  static const int kSongIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 songidx() const;
  inline void set_songidx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Viza.ContainerList)
 private:
  inline void set_has_songidx();
  inline void clear_has_songidx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Viza::Container > containers_;
  ::google::protobuf::uint32 songidx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_VizaImpl_2eproto();
  friend void protobuf_AssignDesc_VizaImpl_2eproto();
  friend void protobuf_ShutdownFile_VizaImpl_2eproto();

  void InitAsDefaultInstance();
  static ContainerList* default_instance_;
};
// ===================================================================


// ===================================================================

// Container

// required float sliceBegin = 1;
inline bool Container::has_slicebegin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Container::set_has_slicebegin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Container::clear_has_slicebegin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Container::clear_slicebegin() {
  slicebegin_ = 0;
  clear_has_slicebegin();
}
inline float Container::slicebegin() const {
  return slicebegin_;
}
inline void Container::set_slicebegin(float value) {
  set_has_slicebegin();
  slicebegin_ = value;
}

// required float sliceEnd = 2;
inline bool Container::has_sliceend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Container::set_has_sliceend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Container::clear_has_sliceend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Container::clear_sliceend() {
  sliceend_ = 0;
  clear_has_sliceend();
}
inline float Container::sliceend() const {
  return sliceend_;
}
inline void Container::set_sliceend(float value) {
  set_has_sliceend();
  sliceend_ = value;
}

// repeated float attributeValues = 3;
inline int Container::attributevalues_size() const {
  return attributevalues_.size();
}
inline void Container::clear_attributevalues() {
  attributevalues_.Clear();
}
inline float Container::attributevalues(int index) const {
  return attributevalues_.Get(index);
}
inline void Container::set_attributevalues(int index, float value) {
  attributevalues_.Set(index, value);
}
inline void Container::add_attributevalues(float value) {
  attributevalues_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Container::attributevalues() const {
  return attributevalues_;
}
inline ::google::protobuf::RepeatedField< float >*
Container::mutable_attributevalues() {
  return &attributevalues_;
}

// repeated uint32 classes = 4;
inline int Container::classes_size() const {
  return classes_.size();
}
inline void Container::clear_classes() {
  classes_.Clear();
}
inline ::google::protobuf::uint32 Container::classes(int index) const {
  return classes_.Get(index);
}
inline void Container::set_classes(int index, ::google::protobuf::uint32 value) {
  classes_.Set(index, value);
}
inline void Container::add_classes(::google::protobuf::uint32 value) {
  classes_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Container::classes() const {
  return classes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Container::mutable_classes() {
  return &classes_;
}

// required uint32 sliceIdx = 5;
inline bool Container::has_sliceidx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Container::set_has_sliceidx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Container::clear_has_sliceidx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Container::clear_sliceidx() {
  sliceidx_ = 0u;
  clear_has_sliceidx();
}
inline ::google::protobuf::uint32 Container::sliceidx() const {
  return sliceidx_;
}
inline void Container::set_sliceidx(::google::protobuf::uint32 value) {
  set_has_sliceidx();
  sliceidx_ = value;
}

// -------------------------------------------------------------------

// ContainerList

// repeated .Viza.Container containers = 1;
inline int ContainerList::containers_size() const {
  return containers_.size();
}
inline void ContainerList::clear_containers() {
  containers_.Clear();
}
inline const ::Viza::Container& ContainerList::containers(int index) const {
  return containers_.Get(index);
}
inline ::Viza::Container* ContainerList::mutable_containers(int index) {
  return containers_.Mutable(index);
}
inline ::Viza::Container* ContainerList::add_containers() {
  return containers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Viza::Container >&
ContainerList::containers() const {
  return containers_;
}
inline ::google::protobuf::RepeatedPtrField< ::Viza::Container >*
ContainerList::mutable_containers() {
  return &containers_;
}

// required uint32 songIdx = 2;
inline bool ContainerList::has_songidx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ContainerList::set_has_songidx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ContainerList::clear_has_songidx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ContainerList::clear_songidx() {
  songidx_ = 0u;
  clear_has_songidx();
}
inline ::google::protobuf::uint32 ContainerList::songidx() const {
  return songidx_;
}
inline void ContainerList::set_songidx(::google::protobuf::uint32 value) {
  set_has_songidx();
  songidx_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Viza

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VizaImpl_2eproto__INCLUDED
