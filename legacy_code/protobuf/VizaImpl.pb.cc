// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VizaImpl.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VizaImpl.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Viza {

namespace {

const ::google::protobuf::Descriptor* Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Container_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VizaImpl_2eproto() {
  protobuf_AddDesc_VizaImpl_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VizaImpl.proto");
  GOOGLE_CHECK(file != NULL);
  Container_descriptor_ = file->message_type(0);
  static const int Container_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, slicebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, sliceend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, attributevalues_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, sliceidx_),
  };
  Container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Container_descriptor_,
      Container::default_instance_,
      Container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Container));
  ContainerList_descriptor_ = file->message_type(1);
  static const int ContainerList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerList, containers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerList, songidx_),
  };
  ContainerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerList_descriptor_,
      ContainerList::default_instance_,
      ContainerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VizaImpl_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Container_descriptor_, &Container::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerList_descriptor_, &ContainerList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VizaImpl_2eproto() {
  delete Container::default_instance_;
  delete Container_reflection_;
  delete ContainerList::default_instance_;
  delete ContainerList_reflection_;
}

void protobuf_AddDesc_VizaImpl_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016VizaImpl.proto\022\004Viza\"m\n\tContainer\022\022\n\ns"
    "liceBegin\030\001 \002(\002\022\020\n\010sliceEnd\030\002 \002(\002\022\027\n\017att"
    "ributeValues\030\003 \003(\002\022\017\n\007classes\030\004 \003(\r\022\020\n\010s"
    "liceIdx\030\005 \002(\r\"E\n\rContainerList\022#\n\ncontai"
    "ners\030\001 \003(\0132\017.Viza.Container\022\017\n\007songIdx\030\002"
    " \002(\r", 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VizaImpl.proto", &protobuf_RegisterTypes);
  Container::default_instance_ = new Container();
  ContainerList::default_instance_ = new ContainerList();
  Container::default_instance_->InitAsDefaultInstance();
  ContainerList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VizaImpl_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VizaImpl_2eproto {
  StaticDescriptorInitializer_VizaImpl_2eproto() {
    protobuf_AddDesc_VizaImpl_2eproto();
  }
} static_descriptor_initializer_VizaImpl_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Container::kSliceBeginFieldNumber;
const int Container::kSliceEndFieldNumber;
const int Container::kAttributeValuesFieldNumber;
const int Container::kClassesFieldNumber;
const int Container::kSliceIdxFieldNumber;
#endif  // !_MSC_VER

Container::Container()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Container::InitAsDefaultInstance() {
}

Container::Container(const Container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Container::SharedCtor() {
  _cached_size_ = 0;
  slicebegin_ = 0;
  sliceend_ = 0;
  sliceidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Container::~Container() {
  SharedDtor();
}

void Container::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Container_descriptor_;
}

const Container& Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VizaImpl_2eproto();
  return *default_instance_;
}

Container* Container::default_instance_ = NULL;

Container* Container::New() const {
  return new Container;
}

void Container::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slicebegin_ = 0;
    sliceend_ = 0;
    sliceidx_ = 0u;
  }
  attributevalues_.Clear();
  classes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float sliceBegin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slicebegin_)));
          set_has_slicebegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sliceEnd;
        break;
      }

      // required float sliceEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sliceEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sliceend_)));
          set_has_sliceend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_attributeValues;
        break;
      }

      // repeated float attributeValues = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_attributeValues:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_attributevalues())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_attributevalues())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_attributeValues;
        if (input->ExpectTag(32)) goto parse_classes;
        break;
      }

      // repeated uint32 classes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_classes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_classes())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_classes())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_classes;
        if (input->ExpectTag(40)) goto parse_sliceIdx;
        break;
      }

      // required uint32 sliceIdx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliceIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sliceidx_)));
          set_has_sliceidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float sliceBegin = 1;
  if (has_slicebegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->slicebegin(), output);
  }

  // required float sliceEnd = 2;
  if (has_sliceend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sliceend(), output);
  }

  // repeated float attributeValues = 3;
  for (int i = 0; i < this->attributevalues_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->attributevalues(i), output);
  }

  // repeated uint32 classes = 4;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->classes(i), output);
  }

  // required uint32 sliceIdx = 5;
  if (has_sliceidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sliceidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float sliceBegin = 1;
  if (has_slicebegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->slicebegin(), target);
  }

  // required float sliceEnd = 2;
  if (has_sliceend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sliceend(), target);
  }

  // repeated float attributeValues = 3;
  for (int i = 0; i < this->attributevalues_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->attributevalues(i), target);
  }

  // repeated uint32 classes = 4;
  for (int i = 0; i < this->classes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->classes(i), target);
  }

  // required uint32 sliceIdx = 5;
  if (has_sliceidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sliceidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Container::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float sliceBegin = 1;
    if (has_slicebegin()) {
      total_size += 1 + 4;
    }

    // required float sliceEnd = 2;
    if (has_sliceend()) {
      total_size += 1 + 4;
    }

    // required uint32 sliceIdx = 5;
    if (has_sliceidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sliceidx());
    }

  }
  // repeated float attributeValues = 3;
  {
    int data_size = 0;
    data_size = 4 * this->attributevalues_size();
    total_size += 1 * this->attributevalues_size() + data_size;
  }

  // repeated uint32 classes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->classes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->classes(i));
    }
    total_size += 1 * this->classes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributevalues_.MergeFrom(from.attributevalues_);
  classes_.MergeFrom(from.classes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slicebegin()) {
      set_slicebegin(from.slicebegin());
    }
    if (from.has_sliceend()) {
      set_sliceend(from.sliceend());
    }
    if (from.has_sliceidx()) {
      set_sliceidx(from.sliceidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void Container::Swap(Container* other) {
  if (other != this) {
    std::swap(slicebegin_, other->slicebegin_);
    std::swap(sliceend_, other->sliceend_);
    attributevalues_.Swap(&other->attributevalues_);
    classes_.Swap(&other->classes_);
    std::swap(sliceidx_, other->sliceidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Container_descriptor_;
  metadata.reflection = Container_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerList::kContainersFieldNumber;
const int ContainerList::kSongIdxFieldNumber;
#endif  // !_MSC_VER

ContainerList::ContainerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerList::InitAsDefaultInstance() {
}

ContainerList::ContainerList(const ContainerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerList::SharedCtor() {
  _cached_size_ = 0;
  songidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerList::~ContainerList() {
  SharedDtor();
}

void ContainerList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ContainerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerList_descriptor_;
}

const ContainerList& ContainerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VizaImpl_2eproto();
  return *default_instance_;
}

ContainerList* ContainerList::default_instance_ = NULL;

ContainerList* ContainerList::New() const {
  return new ContainerList;
}

void ContainerList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    songidx_ = 0u;
  }
  containers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Viza.Container containers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_containers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_containers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_containers;
        if (input->ExpectTag(16)) goto parse_songIdx;
        break;
      }

      // required uint32 songIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_songIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &songidx_)));
          set_has_songidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Viza.Container containers = 1;
  for (int i = 0; i < this->containers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->containers(i), output);
  }

  // required uint32 songIdx = 2;
  if (has_songidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->songidx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Viza.Container containers = 1;
  for (int i = 0; i < this->containers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->containers(i), target);
  }

  // required uint32 songIdx = 2;
  if (has_songidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->songidx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 songIdx = 2;
    if (has_songidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->songidx());
    }

  }
  // repeated .Viza.Container containers = 1;
  total_size += 1 * this->containers_size();
  for (int i = 0; i < this->containers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->containers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerList::MergeFrom(const ContainerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  containers_.MergeFrom(from.containers_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_songidx()) {
      set_songidx(from.songidx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerList::CopyFrom(const ContainerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < containers_size(); i++) {
    if (!this->containers(i).IsInitialized()) return false;
  }
  return true;
}

void ContainerList::Swap(ContainerList* other) {
  if (other != this) {
    containers_.Swap(&other->containers_);
    std::swap(songidx_, other->songidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerList_descriptor_;
  metadata.reflection = ContainerList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Viza

// @@protoc_insertion_point(global_scope)
