// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VizaGlobal.proto

#ifndef PROTOBUF_VizaGlobal_2eproto__INCLUDED
#define PROTOBUF_VizaGlobal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Viza {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VizaGlobal_2eproto();
void protobuf_AssignDesc_VizaGlobal_2eproto();
void protobuf_ShutdownFile_VizaGlobal_2eproto();

class Song;
class Class;
class GlobalList;

// ===================================================================

class Song : public ::google::protobuf::Message {
 public:
  Song();
  virtual ~Song();

  Song(const Song& from);

  inline Song& operator=(const Song& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Song& default_instance();

  void Swap(Song* other);

  // implements Message ----------------------------------------------

  Song* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Song& from);
  void MergeFrom(const Song& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required float length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline float length() const;
  inline void set_length(float value);

  // required uint32 numSlice = 3;
  inline bool has_numslice() const;
  inline void clear_numslice();
  static const int kNumSliceFieldNumber = 3;
  inline ::google::protobuf::uint32 numslice() const;
  inline void set_numslice(::google::protobuf::uint32 value);

  // optional string audioPath = 5;
  inline bool has_audiopath() const;
  inline void clear_audiopath();
  static const int kAudioPathFieldNumber = 5;
  inline const ::std::string& audiopath() const;
  inline void set_audiopath(const ::std::string& value);
  inline void set_audiopath(const char* value);
  inline void set_audiopath(const char* value, size_t size);
  inline ::std::string* mutable_audiopath();
  inline ::std::string* release_audiopath();
  inline void set_allocated_audiopath(::std::string* audiopath);

  // @@protoc_insertion_point(class_scope:Viza.Song)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_numslice();
  inline void clear_has_numslice();
  inline void set_has_audiopath();
  inline void clear_has_audiopath();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  float length_;
  ::google::protobuf::uint32 numslice_;
  ::std::string* audiopath_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_VizaGlobal_2eproto();
  friend void protobuf_AssignDesc_VizaGlobal_2eproto();
  friend void protobuf_ShutdownFile_VizaGlobal_2eproto();

  void InitAsDefaultInstance();
  static Song* default_instance_;
};
// -------------------------------------------------------------------

class Class : public ::google::protobuf::Message {
 public:
  Class();
  virtual ~Class();

  Class(const Class& from);

  inline Class& operator=(const Class& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Class& default_instance();

  void Swap(Class* other);

  // implements Message ----------------------------------------------

  Class* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Class& from);
  void MergeFrom(const Class& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated string values = 2;
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 2;
  inline const ::std::string& values(int index) const;
  inline ::std::string* mutable_values(int index);
  inline void set_values(int index, const ::std::string& value);
  inline void set_values(int index, const char* value);
  inline void set_values(int index, const char* value, size_t size);
  inline ::std::string* add_values();
  inline void add_values(const ::std::string& value);
  inline void add_values(const char* value);
  inline void add_values(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:Viza.Class)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_VizaGlobal_2eproto();
  friend void protobuf_AssignDesc_VizaGlobal_2eproto();
  friend void protobuf_ShutdownFile_VizaGlobal_2eproto();

  void InitAsDefaultInstance();
  static Class* default_instance_;
};
// -------------------------------------------------------------------

class GlobalList : public ::google::protobuf::Message {
 public:
  GlobalList();
  virtual ~GlobalList();

  GlobalList(const GlobalList& from);

  inline GlobalList& operator=(const GlobalList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GlobalList& default_instance();

  void Swap(GlobalList* other);

  // implements Message ----------------------------------------------

  GlobalList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GlobalList& from);
  void MergeFrom(const GlobalList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string AttributesNames = 1;
  inline int attributesnames_size() const;
  inline void clear_attributesnames();
  static const int kAttributesNamesFieldNumber = 1;
  inline const ::std::string& attributesnames(int index) const;
  inline ::std::string* mutable_attributesnames(int index);
  inline void set_attributesnames(int index, const ::std::string& value);
  inline void set_attributesnames(int index, const char* value);
  inline void set_attributesnames(int index, const char* value, size_t size);
  inline ::std::string* add_attributesnames();
  inline void add_attributesnames(const ::std::string& value);
  inline void add_attributesnames(const char* value);
  inline void add_attributesnames(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& attributesnames() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_attributesnames();

  // repeated .Viza.Class classes = 2;
  inline int classes_size() const;
  inline void clear_classes();
  static const int kClassesFieldNumber = 2;
  inline const ::Viza::Class& classes(int index) const;
  inline ::Viza::Class* mutable_classes(int index);
  inline ::Viza::Class* add_classes();
  inline const ::google::protobuf::RepeatedPtrField< ::Viza::Class >&
      classes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Viza::Class >*
      mutable_classes();

  // repeated .Viza.Song songs = 3;
  inline int songs_size() const;
  inline void clear_songs();
  static const int kSongsFieldNumber = 3;
  inline const ::Viza::Song& songs(int index) const;
  inline ::Viza::Song* mutable_songs(int index);
  inline ::Viza::Song* add_songs();
  inline const ::google::protobuf::RepeatedPtrField< ::Viza::Song >&
      songs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Viza::Song >*
      mutable_songs();

  // required uint32 numContainer = 4;
  inline bool has_numcontainer() const;
  inline void clear_numcontainer();
  static const int kNumContainerFieldNumber = 4;
  inline ::google::protobuf::uint32 numcontainer() const;
  inline void set_numcontainer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Viza.GlobalList)
 private:
  inline void set_has_numcontainer();
  inline void clear_has_numcontainer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> attributesnames_;
  ::google::protobuf::RepeatedPtrField< ::Viza::Class > classes_;
  ::google::protobuf::RepeatedPtrField< ::Viza::Song > songs_;
  ::google::protobuf::uint32 numcontainer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_VizaGlobal_2eproto();
  friend void protobuf_AssignDesc_VizaGlobal_2eproto();
  friend void protobuf_ShutdownFile_VizaGlobal_2eproto();

  void InitAsDefaultInstance();
  static GlobalList* default_instance_;
};
// ===================================================================


// ===================================================================

// Song

// required string name = 1;
inline bool Song::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Song::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Song::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Song::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Song::name() const {
  return *name_;
}
inline void Song::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Song::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Song::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Song::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Song::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Song::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required float length = 2;
inline bool Song::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Song::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Song::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Song::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline float Song::length() const {
  return length_;
}
inline void Song::set_length(float value) {
  set_has_length();
  length_ = value;
}

// required uint32 numSlice = 3;
inline bool Song::has_numslice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Song::set_has_numslice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Song::clear_has_numslice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Song::clear_numslice() {
  numslice_ = 0u;
  clear_has_numslice();
}
inline ::google::protobuf::uint32 Song::numslice() const {
  return numslice_;
}
inline void Song::set_numslice(::google::protobuf::uint32 value) {
  set_has_numslice();
  numslice_ = value;
}

// optional string audioPath = 5;
inline bool Song::has_audiopath() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Song::set_has_audiopath() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Song::clear_has_audiopath() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Song::clear_audiopath() {
  if (audiopath_ != &::google::protobuf::internal::kEmptyString) {
    audiopath_->clear();
  }
  clear_has_audiopath();
}
inline const ::std::string& Song::audiopath() const {
  return *audiopath_;
}
inline void Song::set_audiopath(const ::std::string& value) {
  set_has_audiopath();
  if (audiopath_ == &::google::protobuf::internal::kEmptyString) {
    audiopath_ = new ::std::string;
  }
  audiopath_->assign(value);
}
inline void Song::set_audiopath(const char* value) {
  set_has_audiopath();
  if (audiopath_ == &::google::protobuf::internal::kEmptyString) {
    audiopath_ = new ::std::string;
  }
  audiopath_->assign(value);
}
inline void Song::set_audiopath(const char* value, size_t size) {
  set_has_audiopath();
  if (audiopath_ == &::google::protobuf::internal::kEmptyString) {
    audiopath_ = new ::std::string;
  }
  audiopath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Song::mutable_audiopath() {
  set_has_audiopath();
  if (audiopath_ == &::google::protobuf::internal::kEmptyString) {
    audiopath_ = new ::std::string;
  }
  return audiopath_;
}
inline ::std::string* Song::release_audiopath() {
  clear_has_audiopath();
  if (audiopath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = audiopath_;
    audiopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Song::set_allocated_audiopath(::std::string* audiopath) {
  if (audiopath_ != &::google::protobuf::internal::kEmptyString) {
    delete audiopath_;
  }
  if (audiopath) {
    set_has_audiopath();
    audiopath_ = audiopath;
  } else {
    clear_has_audiopath();
    audiopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Class

// required string name = 1;
inline bool Class::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Class::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Class::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Class::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Class::name() const {
  return *name_;
}
inline void Class::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Class::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Class::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Class::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Class::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Class::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string values = 2;
inline int Class::values_size() const {
  return values_.size();
}
inline void Class::clear_values() {
  values_.Clear();
}
inline const ::std::string& Class::values(int index) const {
  return values_.Get(index);
}
inline ::std::string* Class::mutable_values(int index) {
  return values_.Mutable(index);
}
inline void Class::set_values(int index, const ::std::string& value) {
  values_.Mutable(index)->assign(value);
}
inline void Class::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
}
inline void Class::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Class::add_values() {
  return values_.Add();
}
inline void Class::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
}
inline void Class::add_values(const char* value) {
  values_.Add()->assign(value);
}
inline void Class::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Class::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Class::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// GlobalList

// repeated string AttributesNames = 1;
inline int GlobalList::attributesnames_size() const {
  return attributesnames_.size();
}
inline void GlobalList::clear_attributesnames() {
  attributesnames_.Clear();
}
inline const ::std::string& GlobalList::attributesnames(int index) const {
  return attributesnames_.Get(index);
}
inline ::std::string* GlobalList::mutable_attributesnames(int index) {
  return attributesnames_.Mutable(index);
}
inline void GlobalList::set_attributesnames(int index, const ::std::string& value) {
  attributesnames_.Mutable(index)->assign(value);
}
inline void GlobalList::set_attributesnames(int index, const char* value) {
  attributesnames_.Mutable(index)->assign(value);
}
inline void GlobalList::set_attributesnames(int index, const char* value, size_t size) {
  attributesnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GlobalList::add_attributesnames() {
  return attributesnames_.Add();
}
inline void GlobalList::add_attributesnames(const ::std::string& value) {
  attributesnames_.Add()->assign(value);
}
inline void GlobalList::add_attributesnames(const char* value) {
  attributesnames_.Add()->assign(value);
}
inline void GlobalList::add_attributesnames(const char* value, size_t size) {
  attributesnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GlobalList::attributesnames() const {
  return attributesnames_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GlobalList::mutable_attributesnames() {
  return &attributesnames_;
}

// repeated .Viza.Class classes = 2;
inline int GlobalList::classes_size() const {
  return classes_.size();
}
inline void GlobalList::clear_classes() {
  classes_.Clear();
}
inline const ::Viza::Class& GlobalList::classes(int index) const {
  return classes_.Get(index);
}
inline ::Viza::Class* GlobalList::mutable_classes(int index) {
  return classes_.Mutable(index);
}
inline ::Viza::Class* GlobalList::add_classes() {
  return classes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Viza::Class >&
GlobalList::classes() const {
  return classes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Viza::Class >*
GlobalList::mutable_classes() {
  return &classes_;
}

// repeated .Viza.Song songs = 3;
inline int GlobalList::songs_size() const {
  return songs_.size();
}
inline void GlobalList::clear_songs() {
  songs_.Clear();
}
inline const ::Viza::Song& GlobalList::songs(int index) const {
  return songs_.Get(index);
}
inline ::Viza::Song* GlobalList::mutable_songs(int index) {
  return songs_.Mutable(index);
}
inline ::Viza::Song* GlobalList::add_songs() {
  return songs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Viza::Song >&
GlobalList::songs() const {
  return songs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Viza::Song >*
GlobalList::mutable_songs() {
  return &songs_;
}

// required uint32 numContainer = 4;
inline bool GlobalList::has_numcontainer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GlobalList::set_has_numcontainer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GlobalList::clear_has_numcontainer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GlobalList::clear_numcontainer() {
  numcontainer_ = 0u;
  clear_has_numcontainer();
}
inline ::google::protobuf::uint32 GlobalList::numcontainer() const {
  return numcontainer_;
}
inline void GlobalList::set_numcontainer(::google::protobuf::uint32 value) {
  set_has_numcontainer();
  numcontainer_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Viza

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VizaGlobal_2eproto__INCLUDED
