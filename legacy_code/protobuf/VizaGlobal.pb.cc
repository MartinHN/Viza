// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VizaGlobal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VizaGlobal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Viza {

namespace {

const ::google::protobuf::Descriptor* Song_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Song_reflection_ = NULL;
const ::google::protobuf::Descriptor* Class_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Class_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VizaGlobal_2eproto() {
  protobuf_AddDesc_VizaGlobal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VizaGlobal.proto");
  GOOGLE_CHECK(file != NULL);
  Song_descriptor_ = file->message_type(0);
  static const int Song_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, numslice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, audiopath_),
  };
  Song_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Song_descriptor_,
      Song::default_instance_,
      Song_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Song, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Song));
  Class_descriptor_ = file->message_type(1);
  static const int Class_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, values_),
  };
  Class_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Class_descriptor_,
      Class::default_instance_,
      Class_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Class, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Class));
  GlobalList_descriptor_ = file->message_type(2);
  static const int GlobalList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalList, attributesnames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalList, classes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalList, songs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalList, numcontainer_),
  };
  GlobalList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalList_descriptor_,
      GlobalList::default_instance_,
      GlobalList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VizaGlobal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Song_descriptor_, &Song::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Class_descriptor_, &Class::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalList_descriptor_, &GlobalList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VizaGlobal_2eproto() {
  delete Song::default_instance_;
  delete Song_reflection_;
  delete Class::default_instance_;
  delete Class_reflection_;
  delete GlobalList::default_instance_;
  delete GlobalList_reflection_;
}

void protobuf_AddDesc_VizaGlobal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020VizaGlobal.proto\022\004Viza\"I\n\004Song\022\014\n\004name"
    "\030\001 \002(\t\022\016\n\006length\030\002 \002(\002\022\020\n\010numSlice\030\003 \002(\r"
    "\022\021\n\taudioPath\030\005 \001(\t\"%\n\005Class\022\014\n\004name\030\001 \002"
    "(\t\022\016\n\006values\030\002 \003(\t\"t\n\nGlobalList\022\027\n\017Attr"
    "ibutesNames\030\001 \003(\t\022\034\n\007classes\030\002 \003(\0132\013.Viz"
    "a.Class\022\031\n\005songs\030\003 \003(\0132\n.Viza.Song\022\024\n\014nu"
    "mContainer\030\004 \002(\r", 256);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VizaGlobal.proto", &protobuf_RegisterTypes);
  Song::default_instance_ = new Song();
  Class::default_instance_ = new Class();
  GlobalList::default_instance_ = new GlobalList();
  Song::default_instance_->InitAsDefaultInstance();
  Class::default_instance_->InitAsDefaultInstance();
  GlobalList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VizaGlobal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VizaGlobal_2eproto {
  StaticDescriptorInitializer_VizaGlobal_2eproto() {
    protobuf_AddDesc_VizaGlobal_2eproto();
  }
} static_descriptor_initializer_VizaGlobal_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Song::kNameFieldNumber;
const int Song::kLengthFieldNumber;
const int Song::kNumSliceFieldNumber;
const int Song::kAudioPathFieldNumber;
#endif  // !_MSC_VER

Song::Song()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Song::InitAsDefaultInstance() {
}

Song::Song(const Song& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Song::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  length_ = 0;
  numslice_ = 0u;
  audiopath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Song::~Song() {
  SharedDtor();
}

void Song::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (audiopath_ != &::google::protobuf::internal::kEmptyString) {
    delete audiopath_;
  }
  if (this != default_instance_) {
  }
}

void Song::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Song::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Song_descriptor_;
}

const Song& Song::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VizaGlobal_2eproto();
  return *default_instance_;
}

Song* Song::default_instance_ = NULL;

Song* Song::New() const {
  return new Song;
}

void Song::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    length_ = 0;
    numslice_ = 0u;
    if (has_audiopath()) {
      if (audiopath_ != &::google::protobuf::internal::kEmptyString) {
        audiopath_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Song::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_length;
        break;
      }

      // required float length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_numSlice;
        break;
      }

      // required uint32 numSlice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numSlice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numslice_)));
          set_has_numslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_audioPath;
        break;
      }

      // optional string audioPath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_audioPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_audiopath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->audiopath().data(), this->audiopath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Song::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required float length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->length(), output);
  }

  // required uint32 numSlice = 3;
  if (has_numslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->numslice(), output);
  }

  // optional string audioPath = 5;
  if (has_audiopath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audiopath().data(), this->audiopath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->audiopath(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Song::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->length(), target);
  }

  // required uint32 numSlice = 3;
  if (has_numslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->numslice(), target);
  }

  // optional string audioPath = 5;
  if (has_audiopath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->audiopath().data(), this->audiopath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->audiopath(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Song::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float length = 2;
    if (has_length()) {
      total_size += 1 + 4;
    }

    // required uint32 numSlice = 3;
    if (has_numslice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numslice());
    }

    // optional string audioPath = 5;
    if (has_audiopath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->audiopath());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Song::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Song* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Song*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Song::MergeFrom(const Song& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_numslice()) {
      set_numslice(from.numslice());
    }
    if (from.has_audiopath()) {
      set_audiopath(from.audiopath());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Song::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Song::CopyFrom(const Song& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Song::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Song::Swap(Song* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(length_, other->length_);
    std::swap(numslice_, other->numslice_);
    std::swap(audiopath_, other->audiopath_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Song::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Song_descriptor_;
  metadata.reflection = Song_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Class::kNameFieldNumber;
const int Class::kValuesFieldNumber;
#endif  // !_MSC_VER

Class::Class()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Class::InitAsDefaultInstance() {
}

Class::Class(const Class& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Class::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Class::~Class() {
  SharedDtor();
}

void Class::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Class::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Class::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Class_descriptor_;
}

const Class& Class::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VizaGlobal_2eproto();
  return *default_instance_;
}

Class* Class::default_instance_ = NULL;

Class* Class::New() const {
  return new Class;
}

void Class::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Class::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->values(this->values_size() - 1).data(),
            this->values(this->values_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_values;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Class::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->values(i).data(), this->values(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Class::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->values(i).data(), this->values(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Class::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated string values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Class::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Class* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Class*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Class::MergeFrom(const Class& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Class::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Class::CopyFrom(const Class& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Class::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Class::Swap(Class* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Class::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Class_descriptor_;
  metadata.reflection = Class_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalList::kAttributesNamesFieldNumber;
const int GlobalList::kClassesFieldNumber;
const int GlobalList::kSongsFieldNumber;
const int GlobalList::kNumContainerFieldNumber;
#endif  // !_MSC_VER

GlobalList::GlobalList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalList::InitAsDefaultInstance() {
}

GlobalList::GlobalList(const GlobalList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalList::SharedCtor() {
  _cached_size_ = 0;
  numcontainer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalList::~GlobalList() {
  SharedDtor();
}

void GlobalList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalList_descriptor_;
}

const GlobalList& GlobalList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VizaGlobal_2eproto();
  return *default_instance_;
}

GlobalList* GlobalList::default_instance_ = NULL;

GlobalList* GlobalList::New() const {
  return new GlobalList;
}

void GlobalList::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    numcontainer_ = 0u;
  }
  attributesnames_.Clear();
  classes_.Clear();
  songs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string AttributesNames = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttributesNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attributesnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->attributesnames(this->attributesnames_size() - 1).data(),
            this->attributesnames(this->attributesnames_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AttributesNames;
        if (input->ExpectTag(18)) goto parse_classes;
        break;
      }

      // repeated .Viza.Class classes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classes;
        if (input->ExpectTag(26)) goto parse_songs;
        break;
      }

      // repeated .Viza.Song songs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_songs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_songs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_songs;
        if (input->ExpectTag(32)) goto parse_numContainer;
        break;
      }

      // required uint32 numContainer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numContainer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &numcontainer_)));
          set_has_numcontainer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string AttributesNames = 1;
  for (int i = 0; i < this->attributesnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->attributesnames(i).data(), this->attributesnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attributesnames(i), output);
  }

  // repeated .Viza.Class classes = 2;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->classes(i), output);
  }

  // repeated .Viza.Song songs = 3;
  for (int i = 0; i < this->songs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->songs(i), output);
  }

  // required uint32 numContainer = 4;
  if (has_numcontainer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->numcontainer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string AttributesNames = 1;
  for (int i = 0; i < this->attributesnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->attributesnames(i).data(), this->attributesnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->attributesnames(i), target);
  }

  // repeated .Viza.Class classes = 2;
  for (int i = 0; i < this->classes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->classes(i), target);
  }

  // repeated .Viza.Song songs = 3;
  for (int i = 0; i < this->songs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->songs(i), target);
  }

  // required uint32 numContainer = 4;
  if (has_numcontainer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->numcontainer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required uint32 numContainer = 4;
    if (has_numcontainer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->numcontainer());
    }

  }
  // repeated string AttributesNames = 1;
  total_size += 1 * this->attributesnames_size();
  for (int i = 0; i < this->attributesnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attributesnames(i));
  }

  // repeated .Viza.Class classes = 2;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes(i));
  }

  // repeated .Viza.Song songs = 3;
  total_size += 1 * this->songs_size();
  for (int i = 0; i < this->songs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->songs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalList::MergeFrom(const GlobalList& from) {
  GOOGLE_CHECK_NE(&from, this);
  attributesnames_.MergeFrom(from.attributesnames_);
  classes_.MergeFrom(from.classes_);
  songs_.MergeFrom(from.songs_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_numcontainer()) {
      set_numcontainer(from.numcontainer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalList::CopyFrom(const GlobalList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  for (int i = 0; i < classes_size(); i++) {
    if (!this->classes(i).IsInitialized()) return false;
  }
  for (int i = 0; i < songs_size(); i++) {
    if (!this->songs(i).IsInitialized()) return false;
  }
  return true;
}

void GlobalList::Swap(GlobalList* other) {
  if (other != this) {
    attributesnames_.Swap(&other->attributesnames_);
    classes_.Swap(&other->classes_);
    songs_.Swap(&other->songs_);
    std::swap(numcontainer_, other->numcontainer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalList_descriptor_;
  metadata.reflection = GlobalList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Viza

// @@protoc_insertion_point(global_scope)
